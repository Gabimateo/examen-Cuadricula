"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stylesPlugin = void 0;
const promises_1 = require("fs/promises");
const path = __importStar(require("upath"));
const loader_shared_1 = require("@vuetify/loader-shared");
function isSubdir(root, test) {
    const relative = path.relative(root, test);
    return relative && !relative.startsWith('..') && !path.isAbsolute(relative);
}
const styleImportRegexp = /@use ['"]vuetify(\/lib)?\/styles(\/main(\.sass)?)?['"]/;
function stylesPlugin(options) {
    const vuetifyBase = path.dirname(require.resolve('vuetify/package.json'));
    const files = new Set();
    let server;
    let resolve;
    let promise;
    let timeout;
    let needsTouch = false;
    async function awaitResolve() {
        clearTimeout(timeout);
        timeout = setTimeout(() => {
            resolve(true);
        }, 500);
        if (!promise) {
            promise = new Promise((_resolve) => resolve = _resolve);
            await promise;
            await (0, loader_shared_1.writeStyles)(files);
            if (needsTouch) {
                server.moduleGraph.getModulesByFile((0, loader_shared_1.cacheDir)('styles.scss'))?.forEach(module => {
                    module.importers.forEach(module => {
                        module.file && (0, promises_1.utimes)(module.file, Date.now(), Date.now());
                    });
                });
                needsTouch = false;
            }
            promise = null;
        }
        return promise;
    }
    return {
        name: 'vuetify:styles',
        enforce: 'pre',
        configureServer(_server) {
            server = _server;
        },
        async resolveId(source, importer, custom) {
            if (importer &&
                source.endsWith('.css') &&
                isSubdir(vuetifyBase, path.isAbsolute(source) ? source : importer)) {
                if (options.styles === 'none') {
                    return '__void__';
                }
                else if (options.styles === 'expose') {
                    awaitResolve();
                    const resolution = await this.resolve(source.replace(/\.css$/, '.sass'), importer, { skipSelf: true, custom });
                    if (resolution) {
                        if (!files.has(resolution.id)) {
                            needsTouch = true;
                            files.add(resolution.id);
                        }
                        return '__void__';
                    }
                }
            }
            return null;
        },
        async transform(code, id) {
            if (options.styles === 'expose' &&
                ['.scss', '.sass'].some(v => id.endsWith(v)) &&
                styleImportRegexp.test(code)) {
                await awaitResolve();
                return code.replace(styleImportRegexp, '@use ".cache/vuetify/styles.scss"');
            }
        },
        load(id) {
            if (id === '__void__') {
                return '';
            }
            return null;
        },
    };
}
exports.stylesPlugin = stylesPlugin;
//# sourceMappingURL=stylesPlugin.js.map